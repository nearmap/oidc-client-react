{"version":3,"sources":["../src/oidc-stores.js"],"names":["InMemoryWebStorage","WebStorageStateStore","document","localStorage","CookieStore","getItem","key","safeKey","encodeURIComponent","value","cookie","split","find","item","startsWith","decodeURIComponent","setItem","removeItem","stateStore","store","userStore"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,6BAAjC;AACA,SAAQC,oBAAR,QAAmC,6BAAnC;AACA,SAAQC,QAAR,EAAkBC,YAAlB,QAAqC,WAArC;AAGA,OAAO,MAAMC,WAAN,CAAkB;AACvBC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACX,UAAMC,OAAO,GAAGC,kBAAkB,CAACF,GAAD,CAAlC;AACA,UAAMG,KAAK,GAAGP,QAAQ,CAACQ,MAAT,CACXC,KADW,CACL,GADK,EAEXC,IAFW,CAELC,IAAD,IAASA,IAAI,CAACC,UAAL,CAAiB,GAAEP,OAAQ,GAA3B,CAFH,CAAd;;AAIA,QAAIE,KAAJ,EAAW;AACT,aAAOM,kBAAkB,CAACN,KAAK,CAACE,KAAN,CAAa,GAAEJ,OAAQ,GAAvB,EAA2B,CAA3B,CAAD,CAAzB;AACD;AACF;;AAEDS,EAAAA,OAAO,CAACV,GAAD,EAAMG,KAAN,EAAa;AAClB,UAAMF,OAAO,GAAGC,kBAAkB,CAACF,GAAD,CAAlC;AACAJ,IAAAA,QAAQ,CAACQ,MAAT,GAAmB,GAAEH,OAAQ,IAAGC,kBAAkB,CAACC,KAAD,CAAQ,EAA1D;AACD;;AAEDQ,EAAAA,UAAU,CAACX,GAAD,EAAM;AACd,UAAMC,OAAO,GAAGC,kBAAkB,CAACF,GAAD,CAAlC;AACAJ,IAAAA,QAAQ,CAACQ,MAAT,GAAmB,GAAEH,OAAQ,0CAA7B;AACD;;AApBsB;AAwBzB,gBAAe,MAAK;AAClB,MAAI;AACF;AACA;AACAJ,IAAAA,YAAY,CAACa,OAAb,CAAqB,2BAArB,EAAkD,YAAlD;AACAb,IAAAA,YAAY,CAACc,UAAb,CAAwB,2BAAxB;AACA,WAAO,EAAP;AACD,GAND,CAME,gBAAM;AACN,WAAO;AACL;AACA;AACAC,MAAAA,UAAU,EAAE,IAAIjB,oBAAJ,CAAyB;AAACkB,QAAAA,KAAK,EAAE,IAAIf,WAAJ;AAAR,OAAzB,CAHP;AAIL;AACA;AACA;AACA;AACAgB,MAAAA,SAAS,EAAE,IAAInB,oBAAJ,CAAyB;AAACkB,QAAAA,KAAK,EAAE,IAAInB,kBAAJ;AAAR,OAAzB;AARN,KAAP;AAUD;AACF,CAnBD","sourcesContent":["import {InMemoryWebStorage} from 'oidc-client/lib/oidc-client';\nimport {WebStorageStateStore} from 'oidc-client/lib/oidc-client';\nimport {document, localStorage} from './globals';\n\n\nexport class CookieStore {\n  getItem(key) {\n    const safeKey = encodeURIComponent(key);\n    const value = document.cookie\n      .split(';')\n      .find((item)=> item.startsWith(`${safeKey}=`));\n\n    if (value) {\n      return decodeURIComponent(value.split(`${safeKey}=`)[1]);\n    }\n  }\n\n  setItem(key, value) {\n    const safeKey = encodeURIComponent(key);\n    document.cookie = `${safeKey}=${encodeURIComponent(value)}`;\n  }\n\n  removeItem(key) {\n    const safeKey = encodeURIComponent(key);\n    document.cookie = `${safeKey}=; expires=Thu, 01 Jan 1970 00:00:00 GMT`;\n  }\n}\n\n\nexport default ()=> {\n  try {\n    // Safari has a localStorage with no capacity when in private browsing mode,\n    // which will cause the following throw an error.\n    localStorage.setItem('test-ios-private-browsing', 'has-issues');\n    localStorage.removeItem('test-ios-private-browsing');\n    return {};\n  } catch {\n    return {\n      // We need to fallback to using a cookie to store the current state\n      // of the app, as it needs to survive a redirtect to the login page.\n      stateStore: new WebStorageStateStore({store: new CookieStore()}),\n      // We don't care much about the storing the current user data anywhere.\n      // For one this has security implication, second we don't really need it\n      // considering our tokens are rather short and a page reload will perform\n      // a silent signin without too much delay.\n      userStore: new WebStorageStateStore({store: new InMemoryWebStorage()})\n    };\n  }\n};\n"],"file":"oidc-stores.js"}